
V = 30;
x0 = [0; 0; 0; V];
u0 = [0; 0];
Ts = 0.02;
[Ad,Bd,Cd,Dd,U,Y,X,DX] = obstacleVehicleModelDT(Ts,x0,u0);
dsys = ss(Ad,Bd,Cd,Dd,'Ts',Ts);
dsys.InputName = {'Throttle','Delta'};
dsys.StateName = {'X','Y','Theta','V'};
dsys.OutputName = dsys.StateName;


lanes = 3;
laneWidth = 6;
obstacle = struct;
obstacle.Length = 2;
obstacle.Width = 5;

obstacle.X = 25;
obstacle.Y = -2;

obstacle.safeDistanceX = obstacle.Length/2;
obstacle.safeDistanceY = obstacle.Width/2 + 1/2;
obstacle = obstacleGenerateObstacleGeometryInfo(obstacle);

obstacle.DetectionDistance = 30;


f = obstaclePlotInitialCondition(x0,obstacle,laneWidth,lanes);

status = mpcverbosity('off');
mpcobj = mpc(dsys);
mpcobj.PredictionHorizon = 60;%25;
mpcobj.ControlHorizon = 2;%5;
mpcobj.ManipulatedVariables(1).RateMin = -0.2*Ts;
mpcobj.ManipulatedVariables(1).RateMax = 0.2*Ts;
mpcobj.ManipulatedVariables(2).RateMin = -pi/30*Ts;
mpcobj.ManipulatedVariables(2).RateMax = pi/30*Ts;
mpcobj.ManipulatedVariables(1).ScaleFactor = 2;
mpcobj.ManipulatedVariables(2).ScaleFactor = 0.2;
mpcobj.Weights.OutputVariables = [0 30 0 1];
mpcobj.Model.Nominal = struct('U',U,'Y',Y,'X',X,'DX',DX);

E1 = [0 0];
F1 = [0 1 0 0];
G1 = laneWidth*lanes/2;

E2 = [0 0];
F2 = [0 -1 0 0];
G2 = laneWidth*lanes/2;

E3 = [0 0];
F3 = [0 -1 0 0];
G3 = laneWidth*lanes/2;


setconstraint(mpcobj,[E1;E2;E3],[F1;F2;F3],[G1;G2;G3],[1;1;0.1]);

refSignal = [0 0 0 V];

x = x0;
u = u0;
egoStates = mpcstate(mpcobj);

T = 0:Ts:4;
saveSlope = zeros(length(T),1);
saveIntercept = zeros(length(T),1);
ympc = zeros(length(T),size(Cd,1));
umpc = zeros(length(T),size(Bd,2));
for k = 1:length(T)
    % Obtain new plant model and output measurements for interval |k|.
    [Ad,Bd,Cd,Dd,U,Y,X,DX] = obstacleVehicleModelDT(Ts,x,u);
    measurements = Cd * x + Dd * u;
    ympc(k,:) = measurements';

    % Determine whether the vehicle sees the obstacle, and update the mixed
    % I/O constraints when obstacle is detected.
    detection = obstacleDetect(x,obstacle,laneWidth);
    [E,F,G,saveSlope(k),saveIntercept(k)] = ...
        obstacleComputeCustomConstraint(x,detection,obstacle,laneWidth,lanes);

    % Prepare new plant model and nominal conditions for adaptive MPC.
    newPlant = ss(Ad,Bd,Cd,Dd,'Ts',Ts);
    newNominal = struct('U',U,'Y',Y,'X',X,'DX',DX);

    % Prepare new mixed I/O constraints.
    options = mpcmoveopt;
    options.CustomConstraint = struct('E',E,'F',F,'G',G);

    % Compute optimal moves using the updated plant, nominal conditions,
    % and constraints.
    [u,Info] = mpcmoveAdaptive(mpcobj,egoStates,newPlant,newNominal,...
        measurements,refSignal,[],options);
    umpc(k,:) = u';

    % Update the plant state for the next iteration |k+1|.
    x = Ad * x + Bd * u;
end

mpcverbosity(status);

figure(f)

plot(ympc(:,1),ympc(:,2),'-k');
axis([0 ympc(end,1) -laneWidth*lanes/2 laneWidth*lanes/2]) % reset axis
xlim([0 70])

